#pragma kernel Copy
#pragma kernel Erase
#pragma kernel CopyHighlight
#pragma kernel FinalCopy

Texture2D<float4> _OrgTexColor;
RWTexture2D<float4> _FinalTexColor;
RWTexture2D<float4> _FinalTexID;
AppendStructuredBuffer<int> _TexToBuffer;
RWStructuredBuffer<int> _Counter;
int _CurrentSubMesh;

float _StrokeID;
float _OffsetUV;

uint CompactPos(uint2 xy)
{
    uint x = xy.x;
    uint y = xy.y;
    x = x << 16;
    x = x >> 16;
    y = y << 16;
    return x | y;
}

[numthreads(32,32,1)]
void Copy (uint2 id : SV_DispatchThreadID)
{
    if(_OrgTexColor[id].x > 0)
    {
        if(_OrgTexColor[id].x > _FinalTexColor[id].x && _FinalTexColor[id].x > 0)
        {
            return;
        }
        _FinalTexColor[id] = _OrgTexColor[id];
    }
}

[numthreads(32,32,1)]
void FinalCopy (uint2 id : SV_DispatchThreadID)
{
    if(_OrgTexColor[id].x > 0)
    {
        _TexToBuffer.Append(CompactPos(id));
        InterlockedAdd(_Counter[_CurrentSubMesh], 1);
        _FinalTexColor[id] = _OrgTexColor[id];
        _FinalTexID[id] = float4(_StrokeID, 0, 0, 0);
    }
}


[numthreads(32,32,1)]
void Erase (uint2 id : SV_DispatchThreadID)
{
    if(_OrgTexColor[id].x > 0)
    {
        _FinalTexColor[id] = float4(0, 0, 0, 0);
        _FinalTexID[id] = float4(-1, 0, 0, 0);
    }
}

[numthreads(32,32,1)]
void CopyHighlight (uint2 id : SV_DispatchThreadID)
{
    if(_OrgTexColor[id].x > 0)
    {
        _FinalTexColor[id] = _OrgTexColor[id];
    }
}


