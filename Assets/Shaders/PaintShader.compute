#pragma kernel Paint
#pragma kernel FillBackGround

RWTexture2D<float4> result;
float2 cursorPos;
float2 lastCursorPos;
float2 startPos;
float brushSize;
float timeColor;
float previousTimeColor;
bool firstStroke;

float LineSegment2DSDF(float2 p, float2 a, float2 b)
{
    float2 ba = b - a;
    float2 pa = p - a;
    float k = saturate(dot(pa, ba) / dot(ba, ba));
    return length(pa - ba * k);
}
float2 ClosestPointOnLine(float2 lineStart, float2 lineEnd, float2 position)
{
    float2 lineDirection = normalize(lineEnd - lineStart);
    float2 positionRelativeToStart = position - lineStart;
    float projectionDistance = dot(positionRelativeToStart, lineDirection);
    return lineStart + projectionDistance * lineDirection;
}

[numthreads(32,32,1)]
void Paint (uint3 id : SV_DispatchThreadID)
{
    float2 paintPos = startPos.xy + id.xy;
    lastCursorPos += float2(0.01, 0.01);

    if(distance(paintPos, lastCursorPos) < brushSize + 1)
    {
        float2 AtoB = cursorPos - lastCursorPos;
        float2 paintPosToA = lastCursorPos - paintPos;
        if(dot(AtoB, paintPosToA) > 0 && !firstStroke)
        {
            return;
        }
    }

    float paintColor = LineSegment2DSDF(paintPos, lastCursorPos, cursorPos);
    paintColor = 1 - smoothstep(brushSize, brushSize, paintColor);

    if(paintColor == 0)
    {
        return;
    }

    float2 paintPosOnLine = ClosestPointOnLine(lastCursorPos, cursorPos, paintPos);
    float distanceToPointA = distance(lastCursorPos, paintPosOnLine);
    distanceToPointA /= distance(lastCursorPos, cursorPos);
    paintColor = lerp(paintColor * previousTimeColor, paintColor * timeColor, distanceToPointA);
    paintColor = clamp(paintColor, previousTimeColor, timeColor);

    if(paintColor > 0)
    {
        result[paintPos] = float4(paintColor, paintColor, paintColor, 1);
    }
}

[numthreads(32,32,1)]
void FillBackGround (uint3 id : SV_DispatchThreadID)
{
    result[id.xy] = 1;
}


